('http://pastebin.com/zzzzFLy3', 'html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" class GameObject { (...) public Shape CollisionShape { get; set; } } - Pastebin.com [if SafMob]> <style>body{-webkit-text-size-adjust:none;}</style> <![endif] var _gaq = _gaq || []; _gaq.push([\'_setAccount\', \'UA-58643-34\']); _gaq.push([\'_trackPageview\']); setTimeout("_gaq.push([\'_trackEvent\', \'15_seconds\', \'read\'])", 15000); (function() { var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true; ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\'; var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s); })(); PASTEBIN | #1 paste tool since 2002 create new paste tools api archive faq PASTEBIN create new paste trending pastes sign up login my alerts my settings my profile Don\'t like ads? PRO users don\'t see any ads ;-) Public Pastes Chat 9 sec ago Untitled PHP | 20 sec ago Untitled 15 sec ago Cake & Candy is good 1 min ago Untitled 19 sec ago Untitled 20 sec ago Untitled 21 sec ago Untitled 27 sec ago Untitled By: a guest on Jul 12th, 2013 | syntax: None | size: 3.67 KB | hits: 22 | expires: Never download | raw | embed | report abuse | print Text below is selected. Please press Ctrl+C to copy to your clipboard. (+C on Mac) class GameObject { (...) public Shape CollisionShape { get; set; } } GameObject person = new GameObject(); person.CollisionShape = new Circle(100); // 100 is radius public class IntersectionChecker { public bool Intersect(Shape a, Shape b) { Type aType = a.GetType(); Type bType = b.GetType(); if( aType == typeof(Rectangle) && bType == typeof(Rectangle)) return Intersect(a as Rectangle, b as Rectangle); if( aType == typeof(Rectangle) && bType == typeof(Circle)) return Intersect(a as Rectangle, b as Circle); // etc. etc. All combinations } private bool Intersect(Rectangle a, Rectangle b) { // check intersection between rectangles } } IntersectionChecker ic = new IntersectionCHecker(); bool isIntersection = is.Intersect(personA.CollisionShape, personB.CollisionShape); if( aType == typeof(Rectangle) && bType == typeof(Circle)) return Intersect(a as Rectangle, b as Rectangle); if( aType == typeof(Circle) && bType == typeof(Rectangle)) return Intersect(b as Rectangle, a as Circle); // same method as above public class GameObject { private Shape _collisionShape; public GameObject(Shape collisionShape) { _collisionShape = collisionShape; } public bool Intersects(GameObject other) { return _collisionShape.IntersectVisit(other._collisionShape); } } public abstract class Shape { public abstract bool IntersectVisit(Shape other); public abstract bool Intersect(Circle circle); public abstract bool Intersect(Rectangle circle); } public class Circle : Shape { public override bool IntersectVisit(Shape other) { return other.Intersect(this); } public override bool Intersect(Circle circle) { Console.WriteLine("Circle intersecting Circle"); return false; //implement circle to circle collision detection } public override bool Intersect(Rectangle rect) { Console.WriteLine("Circle intersecting Rectangle"); return false; //implement circle to rectangle collision detection } } public class Rectangle : Shape { public override bool IntersectVisit(Shape other) { return other.Intersect(this); } public override bool Intersect(Circle circle) { Console.WriteLine("Rectangle intersecting Circle"); return true; //implement rectangle to circle collision detection } public override bool Intersect(Rectangle rect) { Console.WriteLine("Rectangle intersecting Rectangle"); return true; //implement rectangle to rectangle collision detection } } GameObject objectCircle = new GameObject(new Circle()); GameObject objectRect = new GameObject(new Rectangle()); objectCircle.Intersects(objectCircle); objectCircle.Intersects(objectRect); objectRect.Intersects(objectCircle); objectRect.Intersects(objectRect); Circle intersecting Circle Rectangle intersecting Circle Circle intersecting Rectangle Rectangle intersecting Rectangle abstract class Shape { public abstract Boolean Intersects(Shape other); } class Rectangle : Shape { public override Boolean Intersects(Shape other) { if (other is Rectangle) { return IntersectionChecker.Intersect(this, (Rectangle)other); } else if (other is Circle) { return IntersectionChecker.Intersect(this, (Circle)other); } throw new NotSupportedException(); } } public class Intersection { public bool Intersect(Shape a, Shape b) {....} private bool Intersect(Rectangle a, Circle b) {...} private bool Intersect(Circle a, Circle b) {...} } create a new version of this paste RAW Paste Data class GameObject { (...) public Shape CollisionShape { get; set; } } GameObject person = new GameObject(); person.CollisionShape = new Circle(100); // 100 is radius public class IntersectionChecker { public bool Intersect(Shape a, Shape b) { Type aType = a.GetType(); Type bType = b.GetType(); if( aType == typeof(Rectangle) && bType == typeof(Rectangle)) return Intersect(a as Rectangle, b as Rectangle); if( aType == typeof(Rectangle) && bType == typeof(Circle)) return Intersect(a as Rectangle, b as Circle); // etc. etc. All combinations } private bool Intersect(Rectangle a, Rectangle b) { // check intersection between rectangles } } IntersectionChecker ic = new IntersectionCHecker(); bool isIntersection = is.Intersect(personA.CollisionShape, personB.CollisionShape); if( aType == typeof(Rectangle) && bType == typeof(Circle)) return Intersect(a as Rectangle, b as Rectangle); if( aType == typeof(Circle) && bType == typeof(Rectangle)) return Intersect(b as Rectangle, a as Circle); // same method as above public class GameObject { private Shape _collisionShape; public GameObject(Shape collisionShape) { _collisionShape = collisionShape; } public bool Intersects(GameObject other) { return _collisionShape.IntersectVisit(other._collisionShape); } } public abstract class Shape { public abstract bool IntersectVisit(Shape other); public abstract bool Intersect(Circle circle); public abstract bool Intersect(Rectangle circle); } public class Circle : Shape { public override bool IntersectVisit(Shape other) { return other.Intersect(this); } public override bool Intersect(Circle circle) { Console.WriteLine("Circle intersecting Circle"); return false; //implement circle to circle collision detection } public override bool Intersect(Rectangle rect) { Console.WriteLine("Circle intersecting Rectangle"); return false; //implement circle to rectangle collision detection } } public class Rectangle : Shape { public override bool IntersectVisit(Shape other) { return other.Intersect(this); } public override bool Intersect(Circle circle) { Console.WriteLine("Rectangle intersecting Circle"); return true; //implement rectangle to circle collision detection } public override bool Intersect(Rectangle rect) { Console.WriteLine("Rectangle intersecting Rectangle"); return true; //implement rectangle to rectangle collision detection } } GameObject objectCircle = new GameObject(new Circle()); GameObject objectRect = new GameObject(new Rectangle()); objectCircle.Intersects(objectCircle); objectCircle.Intersects(objectRect); objectRect.Intersects(objectCircle); objectRect.Intersects(objectRect); Circle intersecting Circle Rectangle intersecting Circle Circle intersecting Rectangle Rectangle intersecting Rectangle abstract class Shape { public abstract Boolean Intersects(Shape other); } class Rectangle : Shape { public override Boolean Intersects(Shape other) { if (other is Rectangle) { return IntersectionChecker.Intersect(this, (Rectangle)other); } else if (other is Circle) { return IntersectionChecker.Intersect(this, (Circle)other); } throw new NotSupportedException(); } } public class Intersection { public bool Intersect(Shape a, Shape b) {....} private bool Intersect(Rectangle a, Circle b) {...} private bool Intersect(Circle a, Circle b) {...} } $(document).ready(function(){ $(\'textarea\').autoResize({minHeight: 80,maxHeight: 250}); geturl = "http://pastebin.com/zzzzFLy3"; $.getJSON("http://graph.facebook.com/fql?q=SELECT total_count FROM link_stat WHERE url=\'http://pastebin.com/zzzzFLy3\'", function(data) { $(\'#b_facebook\').append(data.data[0].total_count); }); $.getJSON(\'http://urls.api.twitter.com/1/urls/count.json?url=\'+geturl+\'&callback=?\', function(data) { $(\'#b_twitter\').append(data.count); }); }) Pastebin.com Tools & Applications iPhone/iPad Windows Firefox Chrome WebOS Android Mac Opera Click.to UNIX WinPhone create new paste | api | trends | users | faq | tools | privacy | cookies policy | contact | stats | go pro Follow us: pastebin on facebook | pastebin on twitter | pastebin in the news Pastebin v3.1 rendered in: 0.003 seconds $(\'.narrow_it\').click(function(){ $(\'#super_frame\').animate({width:\'100%\'}, 500); $(\'#footer\').animate({width:\'100%\'}, 500); $(".narrow_it").hide(); $(".wide_it").show(); $.get(\'/layout.php\', function(data) { }); }); $(\'.wide_it\').click(function(){ $(\'#super_frame\').animate({width:\'1200px\'}, 500); $(\'#footer\').animate({width:\'1200px\'}, 500); $(".wide_it").hide(); $(".narrow_it").show(); $.get(\'/layout.php\', function(data) { }); });', '', datetime.datetime(2013, 7, 13, 1, 43, 49))
