('http://pastebin.com/tSwRveui', 'html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" [Clojure] (ns lection01.core) ;; (+ 1 2) (> 3 1) (< 3 1) - Pastebin.com [if SafMob]> <style>body{-webkit-text-size-adjust:none;}</style> <![endif] var _gaq = _gaq || []; _gaq.push([\'_setAccount\', \'UA-58643-34\']); _gaq.push([\'_trackPageview\']); setTimeout("_gaq.push([\'_trackEvent\', \'15_seconds\', \'read\'])", 15000); (function() { var ga = document.createElement(\'script\'); ga.type = \'text/javascript\'; ga.async = true; ga.src = (\'https:\' == document.location.protocol ? \'https://ssl\' : \'http://www\') + \'.google-analytics.com/ga.js\'; var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(ga, s); })(); PASTEBIN | #1 paste tool since 2002 create new paste tools api archive faq PASTEBIN create new paste trending pastes sign up login my alerts my settings my profile Don\'t like ads? PRO users don\'t see any ads ;-) Public Pastes ergtregrt 1 sec ago Untitled Delphi | 4 sec ago startup Lua | 8 sec ago Untitled 21 sec ago Untitled 24 sec ago Untitled 25 sec ago Untitled 27 sec ago Untitled 31 sec ago Untitled By: a guest on Mar 16th, 2013 | syntax: Clojure | size: 2.98 KB | hits: 27 | expires: Never download | raw | embed | report abuse | print Text below is selected. Please press Ctrl+C to copy to your clipboard. (+C on Mac) ( ns lection01 . core ) ;; (+ 1 2) (> 3 1) (< 3 1) (= 3 1) (* 3 5) (/ 3 5) (int (/ 3 5)) (double (/ 3 5)) (str (/ 3 5)) (println "Hello World!") (zero? 0) (nil? 0) (true? true) (empty? nil) (if (> 3 1) "\'Then\' branch\'" "\'Else\' branch\'") (do (+ 1 2) (+ 3 4)) (if (> 3 1) (do (println "then") true) false) (def a 1) (def a (+ 1 2)) (fn [a b] (+ a b)) ((fn [a b] (+ a b)) 1 2) #(+ %1 %2) #(+ % %2) #(println %) (#(println %) 17) (def f (fn [a b] (+ a b))) (f 1 2) (defn f2 [a b] (+ a b)) (defn f3 [a b] "Sums a and b" (+ a b)) (defn ^{:doc "Sums a and b"} f4 [a b] (+ a b)) (defn f5 ([a b] (+ a b)) ([a b c] (+ a b c))) (defn f6 [a & args] (let [b (first args) c (first (next args))] (+ a b c))) (let [a 1 b (+ a 2)] (println b)) (loop [a 1 b 2] (if (> a 10) a (do (println a) (recur (inc a) (+ a b))))) (let [grade 85] (cond (> grade 90) "A" (> grade 80) "B" (> grade 70) "C" (> grade 60) "D" :else "F")) ;; 1 2 3 1.0 2.0 3/4 5/6 "a b c" \\a \\b \\c true false :a :abc \'a \'abc ;; ;; \'(1 2 3) (list? \'(1 2 3)) (cons 1 \'(2 3)) (conj \'(2 3) 1) (first \'(1 2 3)) (first \'()) (first nil) (next \'(1 2 3)) (next \'()) (next nil) (rest \'(1 2 3)) (rest \'()) (rest nil) ;; [1 2 3] (vector? [1 2 3]) (conj [1 2] 3) (first [1 2 3]) (first []) (get [1 2 3] 0) (get [1 2 3] 2) (next [1 2 3]) (next []) (rest [1 2 3]) (rest []) ;; #{1 2 3} (set? #{1 2 3}) (conj #{1 2} 3) (first #{1 2 3}) (next #{1 2 3}) (next #{}) (rest #{1 2 3}) (rest #{}) ;; {:a 1, :b 2, :c 3} {:a 1 :b 2 :c 3} (map? {:a 1 :b 2 :c 3}) (assoc {:a 1} :b 2) (assoc nil :b 2) (dissoc {:a 1, :b 2, :c 3} :b) (first {:a 1, :b 2, :c 3}) (next {:a 1, :b 2, :c 3}) (rest {:a 1, :b 2, :c 3}) (get {:a 1} :a) (:a {:a 1}) ;; (count \'(1 2 3)) (vec \'(1 2 3)) (range 1 10) ;; (defn my-map [func data-list] (loop [data data-list result []] (if (empty? data) result (recur (next data) (conj result (func (first data))))))) (my-map #(+ % 2) [1 2 3]) (defn my-filter [func data-list] (loop [data data-list result []] (if (empty? data) result (if (func (first data)) (recur (next data) (conj result (first data))) (recur (next data) result))))) (my-filter even? [1 2 3 4]) (defn my-reduce [func data-list] (loop [data (next data-list) result (first data-list)] (if (empty? data) result (recur (next data) (func result (first data)))))) ;; (defn fibonacci [prev1 prev2 limit acc] (if (> prev1 limit) acc (recur prev2 (+ prev1 prev2) limit (conj acc prev1)))) (defn fibonacci2 ([prev1 prev2 limit acc] (if (> prev1 limit) acc (recur prev2 (+ prev1 prev2) limit (conj acc prev1)))) ([limit] (fibonacci2 0 1 limit []))) (defn fibonacci3 [limit] (loop [prev1 1 prev2 2 acc []] (if (> prev1 limit) acc (recur prev2 (+ prev1 prev2) (conj acc prev1))))) (reduce + (filter even? (fibonacci2 4000000))) ;; . (slurp "project.clj") (spit "test.txt" "Hello, World!") create a new version of this paste RAW Paste Data (ns lection01.core) ;; (+ 1 2) (> 3 1) (< 3 1) (= 3 1) (* 3 5) (/ 3 5) (int (/ 3 5)) (double (/ 3 5)) (str (/ 3 5)) (println "Hello World!") (zero? 0) (nil? 0) (true? true) (empty? nil) (if (> 3 1) "\'Then\' branch\'" "\'Else\' branch\'") (do (+ 1 2) (+ 3 4)) (if (> 3 1) (do (println "then") true) false) (def a 1) (def a (+ 1 2)) (fn [a b] (+ a b)) ((fn [a b] (+ a b)) 1 2) #(+ %1 %2) #(+ % %2) #(println %) (#(println %) 17) (def f (fn [a b] (+ a b))) (f 1 2) (defn f2 [a b] (+ a b)) (defn f3 [a b] "Sums a and b" (+ a b)) (defn ^{:doc "Sums a and b"} f4 [a b] (+ a b)) (defn f5 ([a b] (+ a b)) ([a b c] (+ a b c))) (defn f6 [a & args] (let [b (first args) c (first (next args))] (+ a b c))) (let [a 1 b (+ a 2)] (println b)) (loop [a 1 b 2] (if (> a 10) a (do (println a) (recur (inc a) (+ a b))))) (let [grade 85] (cond (> grade 90) "A" (> grade 80) "B" (> grade 70) "C" (> grade 60) "D" :else "F")) ;; 1 2 3 1.0 2.0 3/4 5/6 "a b c" \\a \\b \\c true false :a :abc \'a \'abc ;; ;; \'(1 2 3) (list? \'(1 2 3)) (cons 1 \'(2 3)) (conj \'(2 3) 1) (first \'(1 2 3)) (first \'()) (first nil) (next \'(1 2 3)) (next \'()) (next nil) (rest \'(1 2 3)) (rest \'()) (rest nil) ;; [1 2 3] (vector? [1 2 3]) (conj [1 2] 3) (first [1 2 3]) (first []) (get [1 2 3] 0) (get [1 2 3] 2) (next [1 2 3]) (next []) (rest [1 2 3]) (rest []) ;; #{1 2 3} (set? #{1 2 3}) (conj #{1 2} 3) (first #{1 2 3}) (next #{1 2 3}) (next #{}) (rest #{1 2 3}) (rest #{}) ;; {:a 1, :b 2, :c 3} {:a 1 :b 2 :c 3} (map? {:a 1 :b 2 :c 3}) (assoc {:a 1} :b 2) (assoc nil :b 2) (dissoc {:a 1, :b 2, :c 3} :b) (first {:a 1, :b 2, :c 3}) (next {:a 1, :b 2, :c 3}) (rest {:a 1, :b 2, :c 3}) (get {:a 1} :a) (:a {:a 1}) ;; (count \'(1 2 3)) (vec \'(1 2 3)) (range 1 10) ;; (defn my-map [func data-list] (loop [data data-list result []] (if (empty? data) result (recur (next data) (conj result (func (first data))))))) (my-map #(+ % 2) [1 2 3]) (defn my-filter [func data-list] (loop [data data-list result []] (if (empty? data) result (if (func (first data)) (recur (next data) (conj result (first data))) (recur (next data) result))))) (my-filter even? [1 2 3 4]) (defn my-reduce [func data-list] (loop [data (next data-list) result (first data-list)] (if (empty? data) result (recur (next data) (func result (first data)))))) ;; (defn fibonacci [prev1 prev2 limit acc] (if (> prev1 limit) acc (recur prev2 (+ prev1 prev2) limit (conj acc prev1)))) (defn fibonacci2 ([prev1 prev2 limit acc] (if (> prev1 limit) acc (recur prev2 (+ prev1 prev2) limit (conj acc prev1)))) ([limit] (fibonacci2 0 1 limit []))) (defn fibonacci3 [limit] (loop [prev1 1 prev2 2 acc []] (if (> prev1 limit) acc (recur prev2 (+ prev1 prev2) (conj acc prev1))))) (reduce + (filter even? (fibonacci2 4000000))) ;; . (slurp "project.clj") (spit "test.txt" "Hello, World!") $(document).ready(function(){ $(\'textarea\').autoResize({minHeight: 80,maxHeight: 250}); geturl = "http://pastebin.com/tSwRveui"; $.getJSON("http://graph.facebook.com/fql?q=SELECT total_count FROM link_stat WHERE url=\'http://pastebin.com/tSwRveui\'", function(data) { $(\'#b_facebook\').append(data.data[0].total_count); }); $.getJSON(\'http://urls.api.twitter.com/1/urls/count.json?url=\'+geturl+\'&callback=?\', function(data) { $(\'#b_twitter\').append(data.count); }); }) Pastebin.com Tools & Applications iPhone/iPad Windows Firefox Chrome WebOS Android Mac Opera Click.to UNIX WinPhone create new paste | api | trends | users | faq | tools | privacy | cookies policy | contact | stats | go pro Follow us: pastebin on facebook | pastebin on twitter | pastebin in the news Pastebin v3.1 rendered in: 0.015 seconds $(\'.narrow_it\').click(function(){ $(\'#super_frame\').animate({width:\'100%\'}, 500); $(\'#footer\').animate({width:\'100%\'}, 500); $(".narrow_it").hide(); $(".wide_it").show(); $.get(\'/layout.php\', function(data) { }); }); $(\'.wide_it\').click(function(){ $(\'#super_frame\').animate({width:\'1200px\'}, 500); $(\'#footer\').animate({width:\'1200px\'}, 500); $(".wide_it").hide(); $(".narrow_it").show(); $.get(\'/layout.php\', function(data) { }); });', '', datetime.datetime(2013, 7, 13, 18, 33, 57))
